import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import _objectSpread2 from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";
import * as React from "react";
import CSSMotion from "../../../../../rc-motion@2.9.0_react-dom@18.2.0_react@18.2.0/node_modules/rc-motion/es/CSSMotion.js";
import "../../../../../rc-motion@2.9.0_react-dom@18.2.0_react@18.2.0/node_modules/rc-motion/es/CSSMotionList.js";
import classNames from "../../../../../classnames@2.3.2/node_modules/classnames/index.js";
var MobilePopupInner = /* @__PURE__ */ React.forwardRef(function(props, ref) {
  var prefixCls = props.prefixCls, visible = props.visible, zIndex = props.zIndex, children = props.children, _props$mobile = props.mobile;
  _props$mobile = _props$mobile === void 0 ? {} : _props$mobile;
  var popupClassName = _props$mobile.popupClassName, popupStyle = _props$mobile.popupStyle, _props$mobile$popupMo = _props$mobile.popupMotion, popupMotion = _props$mobile$popupMo === void 0 ? {} : _props$mobile$popupMo, popupRender = _props$mobile.popupRender, onClick = props.onClick;
  var elementRef = React.useRef();
  React.useImperativeHandle(ref, function() {
    return {
      forceAlign: function forceAlign() {
      },
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  var mergedStyle = _objectSpread2({
    zIndex
  }, popupStyle);
  var childNode = children;
  if (React.Children.count(children) > 1) {
    childNode = /* @__PURE__ */ React.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, children);
  }
  if (popupRender) {
    childNode = popupRender(childNode);
  }
  return /* @__PURE__ */ React.createElement(CSSMotion, _extends({
    visible,
    ref: elementRef,
    removeOnLeave: true
  }, popupMotion), function(_ref, motionRef) {
    var motionClassName = _ref.className, motionStyle = _ref.style;
    var mergedClassName = classNames(prefixCls, popupClassName, motionClassName);
    return /* @__PURE__ */ React.createElement("div", {
      ref: motionRef,
      className: mergedClassName,
      onClick,
      style: _objectSpread2(_objectSpread2({}, motionStyle), mergedStyle)
    }, childNode);
  });
});
MobilePopupInner.displayName = "MobilePopupInner";
export {
  MobilePopupInner as default
};
