import _typeof from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/typeof.js";
import _defineProperty from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js";
import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import _slicedToArray from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";
import classNames from "../../../../../classnames@2.3.2/node_modules/classnames/index.js";
import Table$2, { INTERNAL_HOOKS } from "../../../../../rc-table@7.26.0_react-dom@18.2.0_react@18.2.0/node_modules/rc-table/es/Table.js";
import { FooterComponents } from "../../../../../rc-table@7.26.0_react-dom@18.2.0_react@18.2.0/node_modules/rc-table/es/Footer/index.js";
import "../../../../../rc-util@5.38.1_react-dom@18.2.0_react@18.2.0/node_modules/rc-util/es/warning.js";
import { convertChildrenToColumns } from "../../../../../rc-table@7.26.0_react-dom@18.2.0_react@18.2.0/node_modules/rc-table/es/hooks/useColumns.js";
import omit from "../../../../../rc-util@5.38.1_react-dom@18.2.0_react@18.2.0/node_modules/rc-util/es/omit.js";
import * as React from "react";
import { ConfigContext } from "../config-provider/context.js";
import defaultRenderEmpty from "../config-provider/defaultRenderEmpty.js";
import SizeContext from "../config-provider/SizeContext.js";
import useBreakpoint from "../grid/hooks/useBreakpoint.js";
import defaultLocale from "../locale/default.js";
import Pagination from "../pagination/Pagination.js";
import Spin from "../spin/index.js";
import scrollTo from "../_util/scrollTo.js";
import warning from "../_util/warning.js";
import Column from "./Column.js";
import ColumnGroup from "./ColumnGroup.js";
import renderExpandIcon from "./ExpandIcon.js";
import useFilter, { getFilterData } from "./hooks/useFilter/index.js";
import useLazyKVMap from "./hooks/useLazyKVMap.js";
import usePagination, { getPaginationParam, DEFAULT_PAGE_SIZE } from "./hooks/usePagination.js";
import useSelection, { SELECTION_COLUMN, SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE } from "./hooks/useSelection.js";
import useFilterSorter, { getSortData } from "./hooks/useSorter.js";
import useTitleColumns from "./hooks/useTitleColumns.js";
var EMPTY_LIST = [];
function InternalTable(props, ref) {
  var _classNames3;
  var customizePrefixCls = props.prefixCls, className = props.className, style = props.style, customizeSize = props.size, bordered = props.bordered, customizeDropdownPrefixCls = props.dropdownPrefixCls, dataSource = props.dataSource, pagination = props.pagination, rowSelection = props.rowSelection, _props$rowKey = props.rowKey, rowKey = _props$rowKey === void 0 ? "key" : _props$rowKey, rowClassName = props.rowClassName, columns = props.columns, children = props.children, legacyChildrenColumnName = props.childrenColumnName, onChange = props.onChange, getPopupContainer = props.getPopupContainer, loading = props.loading, expandIcon = props.expandIcon, expandable = props.expandable, expandedRowRender = props.expandedRowRender, expandIconColumnIndex = props.expandIconColumnIndex, indentSize = props.indentSize, scroll = props.scroll, sortDirections = props.sortDirections, locale = props.locale, _props$showSorterTool = props.showSorterTooltip, showSorterTooltip = _props$showSorterTool === void 0 ? true : _props$showSorterTool;
  process.env.NODE_ENV !== "production" ? warning(!(typeof rowKey === "function" && rowKey.length > 1), "Table", "`index` parameter of `rowKey` function is deprecated. There is no guarantee that it will work as expected.") : void 0;
  [["filterDropdownVisible", "filterDropdownOpen"], ["onFilterDropdownVisibleChange", "onFilterDropdownOpenChange"]].forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), deprecatedName = _ref2[0], newName = _ref2[1];
    process.env.NODE_ENV !== "production" ? warning(!(deprecatedName in props), "Table", "`".concat(deprecatedName, "` is deprecated which will be removed in next major version.Please use `").concat(newName, "` instead. ")) : void 0;
  });
  var baseColumns = React.useMemo(function() {
    return columns || convertChildrenToColumns(children);
  }, [columns, children]);
  var needResponsive = React.useMemo(function() {
    return baseColumns.some(function(col) {
      return col.responsive;
    });
  }, [baseColumns]);
  var screens = useBreakpoint(needResponsive);
  var mergedColumns = React.useMemo(function() {
    var matched = new Set(Object.keys(screens).filter(function(m) {
      return screens[m];
    }));
    return baseColumns.filter(function(c) {
      return !c.responsive || c.responsive.some(function(r) {
        return matched.has(r);
      });
    });
  }, [baseColumns, screens]);
  var tableProps = omit(props, ["className", "style", "columns"]);
  var size = React.useContext(SizeContext);
  var _React$useContext = React.useContext(ConfigContext), _React$useContext$loc = _React$useContext.locale, contextLocale = _React$useContext$loc === void 0 ? defaultLocale : _React$useContext$loc, renderEmpty = _React$useContext.renderEmpty, direction = _React$useContext.direction;
  var mergedSize = customizeSize || size;
  var tableLocale = _extends(_extends({}, contextLocale.Table), locale);
  var rawData = dataSource || EMPTY_LIST;
  var _React$useContext2 = React.useContext(ConfigContext), getPrefixCls = _React$useContext2.getPrefixCls;
  var prefixCls = getPrefixCls("table", customizePrefixCls);
  var dropdownPrefixCls = getPrefixCls("dropdown", customizeDropdownPrefixCls);
  var mergedExpandable = _extends({
    childrenColumnName: legacyChildrenColumnName,
    expandIconColumnIndex
  }, expandable);
  var _mergedExpandable$chi = mergedExpandable.childrenColumnName, childrenColumnName = _mergedExpandable$chi === void 0 ? "children" : _mergedExpandable$chi;
  var expandType = React.useMemo(function() {
    if (rawData.some(function(item) {
      return item === null || item === void 0 ? void 0 : item[childrenColumnName];
    })) {
      return "nest";
    }
    if (expandedRowRender || expandable && expandable.expandedRowRender) {
      return "row";
    }
    return null;
  }, [rawData]);
  var internalRefs = {
    body: React.useRef()
  };
  var getRowKey = React.useMemo(function() {
    if (typeof rowKey === "function") {
      return rowKey;
    }
    return function(record) {
      return record === null || record === void 0 ? void 0 : record[rowKey];
    };
  }, [rowKey]);
  var _useLazyKVMap = useLazyKVMap(rawData, childrenColumnName, getRowKey), _useLazyKVMap2 = _slicedToArray(_useLazyKVMap, 1), getRecordByKey = _useLazyKVMap2[0];
  var changeEventInfo = {};
  var triggerOnChange = function triggerOnChange2(info, action) {
    var reset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var changeInfo = _extends(_extends({}, changeEventInfo), info);
    if (reset) {
      changeEventInfo.resetPagination();
      if (changeInfo.pagination.current) {
        changeInfo.pagination.current = 1;
      }
      if (pagination && pagination.onChange) {
        pagination.onChange(1, changeInfo.pagination.pageSize);
      }
    }
    if (scroll && scroll.scrollToFirstRowOnChange !== false && internalRefs.body.current) {
      scrollTo(0, {
        getContainer: function getContainer() {
          return internalRefs.body.current;
        }
      });
    }
    onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo.pagination, changeInfo.filters, changeInfo.sorter, {
      currentDataSource: getFilterData(getSortData(rawData, changeInfo.sorterStates, childrenColumnName), changeInfo.filterStates),
      action
    });
  };
  var onSorterChange = function onSorterChange2(sorter, sorterStates) {
    triggerOnChange({
      sorter,
      sorterStates
    }, "sort", false);
  };
  var _useSorter = useFilterSorter({
    prefixCls,
    mergedColumns,
    onSorterChange,
    sortDirections: sortDirections || ["ascend", "descend"],
    tableLocale,
    showSorterTooltip
  }), _useSorter2 = _slicedToArray(_useSorter, 4), transformSorterColumns = _useSorter2[0], sortStates = _useSorter2[1], sorterTitleProps = _useSorter2[2], getSorters = _useSorter2[3];
  var sortedData = React.useMemo(function() {
    return getSortData(rawData, sortStates, childrenColumnName);
  }, [rawData, sortStates]);
  changeEventInfo.sorter = getSorters();
  changeEventInfo.sorterStates = sortStates;
  var onFilterChange = function onFilterChange2(filters2, filterStates2) {
    triggerOnChange({
      filters: filters2,
      filterStates: filterStates2
    }, "filter", true);
  };
  var _useFilter = useFilter({
    prefixCls,
    locale: tableLocale,
    dropdownPrefixCls,
    mergedColumns,
    onFilterChange,
    getPopupContainer
  }), _useFilter2 = _slicedToArray(_useFilter, 3), transformFilterColumns = _useFilter2[0], filterStates = _useFilter2[1], filters = _useFilter2[2];
  var mergedData = getFilterData(sortedData, filterStates);
  changeEventInfo.filters = filters;
  changeEventInfo.filterStates = filterStates;
  var columnTitleProps = React.useMemo(function() {
    var mergedFilters = {};
    Object.keys(filters).forEach(function(filterKey) {
      if (filters[filterKey] !== null) {
        mergedFilters[filterKey] = filters[filterKey];
      }
    });
    return _extends(_extends({}, sorterTitleProps), {
      filters: mergedFilters
    });
  }, [sorterTitleProps, filters]);
  var _useTitleColumns = useTitleColumns(columnTitleProps), _useTitleColumns2 = _slicedToArray(_useTitleColumns, 1), transformTitleColumns = _useTitleColumns2[0];
  var onPaginationChange = function onPaginationChange2(current, pageSize) {
    triggerOnChange({
      pagination: _extends(_extends({}, changeEventInfo.pagination), {
        current,
        pageSize
      })
    }, "paginate");
  };
  var _usePagination = usePagination(mergedData.length, pagination, onPaginationChange), _usePagination2 = _slicedToArray(_usePagination, 2), mergedPagination = _usePagination2[0], resetPagination = _usePagination2[1];
  changeEventInfo.pagination = pagination === false ? {} : getPaginationParam(pagination, mergedPagination);
  changeEventInfo.resetPagination = resetPagination;
  var pageData = React.useMemo(function() {
    if (pagination === false || !mergedPagination.pageSize) {
      return mergedData;
    }
    var _mergedPagination$cur = mergedPagination.current, current = _mergedPagination$cur === void 0 ? 1 : _mergedPagination$cur, total = mergedPagination.total, _mergedPagination$pag = mergedPagination.pageSize, pageSize = _mergedPagination$pag === void 0 ? DEFAULT_PAGE_SIZE : _mergedPagination$pag;
    process.env.NODE_ENV !== "production" ? warning(current > 0, "Table", "`current` should be positive number.") : void 0;
    if (mergedData.length < total) {
      if (mergedData.length > pageSize) {
        process.env.NODE_ENV !== "production" ? warning(false, "Table", "`dataSource` length is less than `pagination.total` but large than `pagination.pageSize`. Please make sure your config correct data with async mode.") : void 0;
        return mergedData.slice((current - 1) * pageSize, current * pageSize);
      }
      return mergedData;
    }
    return mergedData.slice((current - 1) * pageSize, current * pageSize);
  }, [!!pagination, mergedData, mergedPagination && mergedPagination.current, mergedPagination && mergedPagination.pageSize, mergedPagination && mergedPagination.total]);
  var _useSelection = useSelection(rowSelection, {
    prefixCls,
    data: mergedData,
    pageData,
    getRowKey,
    getRecordByKey,
    expandType,
    childrenColumnName,
    locale: tableLocale,
    getPopupContainer
  }), _useSelection2 = _slicedToArray(_useSelection, 2), transformSelectionColumns = _useSelection2[0], selectedKeySet = _useSelection2[1];
  var internalRowClassName = function internalRowClassName2(record, index, indent) {
    var mergedRowClassName;
    if (typeof rowClassName === "function") {
      mergedRowClassName = classNames(rowClassName(record, index, indent));
    } else {
      mergedRowClassName = classNames(rowClassName);
    }
    return classNames(_defineProperty({}, "".concat(prefixCls, "-row-selected"), selectedKeySet.has(getRowKey(record, index))), mergedRowClassName);
  };
  mergedExpandable.__PARENT_RENDER_ICON__ = mergedExpandable.expandIcon;
  mergedExpandable.expandIcon = mergedExpandable.expandIcon || expandIcon || renderExpandIcon(tableLocale);
  if (expandType === "nest" && mergedExpandable.expandIconColumnIndex === void 0) {
    mergedExpandable.expandIconColumnIndex = rowSelection ? 1 : 0;
  } else if (mergedExpandable.expandIconColumnIndex > 0 && rowSelection) {
    mergedExpandable.expandIconColumnIndex -= 1;
  }
  if (typeof mergedExpandable.indentSize !== "number") {
    mergedExpandable.indentSize = typeof indentSize === "number" ? indentSize : 15;
  }
  var transformColumns = React.useCallback(function(innerColumns) {
    return transformTitleColumns(transformSelectionColumns(transformFilterColumns(transformSorterColumns(innerColumns))));
  }, [transformSorterColumns, transformFilterColumns, transformSelectionColumns]);
  var topPaginationNode;
  var bottomPaginationNode;
  if (pagination !== false && (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.total)) {
    var paginationSize;
    if (mergedPagination.size) {
      paginationSize = mergedPagination.size;
    } else {
      paginationSize = mergedSize === "small" || mergedSize === "middle" ? "small" : void 0;
    }
    var renderPagination = function renderPagination2(position2) {
      return /* @__PURE__ */ React.createElement(Pagination, _extends({}, mergedPagination, {
        className: classNames("".concat(prefixCls, "-pagination ").concat(prefixCls, "-pagination-").concat(position2), mergedPagination.className),
        size: paginationSize
      }));
    };
    var defaultPosition = direction === "rtl" ? "left" : "right";
    var position = mergedPagination.position;
    if (position !== null && Array.isArray(position)) {
      var topPos = position.find(function(p) {
        return p.includes("top");
      });
      var bottomPos = position.find(function(p) {
        return p.includes("bottom");
      });
      var isDisable = position.every(function(p) {
        return "".concat(p) === "none";
      });
      if (!topPos && !bottomPos && !isDisable) {
        bottomPaginationNode = renderPagination(defaultPosition);
      }
      if (topPos) {
        topPaginationNode = renderPagination(topPos.toLowerCase().replace("top", ""));
      }
      if (bottomPos) {
        bottomPaginationNode = renderPagination(bottomPos.toLowerCase().replace("bottom", ""));
      }
    } else {
      bottomPaginationNode = renderPagination(defaultPosition);
    }
  }
  var spinProps;
  if (typeof loading === "boolean") {
    spinProps = {
      spinning: loading
    };
  } else if (_typeof(loading) === "object") {
    spinProps = _extends({
      spinning: true
    }, loading);
  }
  var wrapperClassNames = classNames("".concat(prefixCls, "-wrapper"), _defineProperty({}, "".concat(prefixCls, "-wrapper-rtl"), direction === "rtl"), className);
  return /* @__PURE__ */ React.createElement("div", {
    ref,
    className: wrapperClassNames,
    style
  }, /* @__PURE__ */ React.createElement(Spin, _extends({
    spinning: false
  }, spinProps), topPaginationNode, /* @__PURE__ */ React.createElement(Table$2, _extends({}, tableProps, {
    columns: mergedColumns,
    direction,
    expandable: mergedExpandable,
    prefixCls,
    className: classNames((_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls, "-middle"), mergedSize === "middle"), _defineProperty(_classNames3, "".concat(prefixCls, "-small"), mergedSize === "small"), _defineProperty(_classNames3, "".concat(prefixCls, "-bordered"), bordered), _defineProperty(_classNames3, "".concat(prefixCls, "-empty"), rawData.length === 0), _classNames3)),
    data: pageData,
    rowKey: getRowKey,
    rowClassName: internalRowClassName,
    emptyText: locale && locale.emptyText || (renderEmpty || defaultRenderEmpty)("Table"),
    // Internal
    internalHooks: INTERNAL_HOOKS,
    internalRefs,
    transformColumns
  })), bottomPaginationNode));
}
var ForwardTable = /* @__PURE__ */ React.forwardRef(InternalTable);
var Table = ForwardTable;
Table.SELECTION_COLUMN = SELECTION_COLUMN;
Table.EXPAND_COLUMN = Table$2.EXPAND_COLUMN;
Table.SELECTION_ALL = SELECTION_ALL;
Table.SELECTION_INVERT = SELECTION_INVERT;
Table.SELECTION_NONE = SELECTION_NONE;
Table.Column = Column;
Table.ColumnGroup = ColumnGroup;
Table.Summary = FooterComponents;
const Table$1 = Table;
export {
  Table$1 as default
};
