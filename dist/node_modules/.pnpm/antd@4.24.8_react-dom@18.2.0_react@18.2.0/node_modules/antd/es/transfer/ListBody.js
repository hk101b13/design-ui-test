import _defineProperty from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js";
import _classCallCheck from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/classCallCheck.js";
import _createClass from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/createClass.js";
import _inherits from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/inherits.js";
import _createSuper from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/createSuper.js";
import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import _typeof from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/typeof.js";
import classNames from "../../../../../classnames@2.3.2/node_modules/classnames/index.js";
import * as React from "react";
import Pagination from "../pagination/Pagination.js";
import { tuple } from "../_util/type.js";
import ListItem from "./ListItem.js";
var OmitProps = tuple("handleFilter", "handleClear", "checkedKeys");
function parsePagination(pagination) {
  if (!pagination) {
    return null;
  }
  var defaultPagination = {
    pageSize: 10,
    simple: true,
    showSizeChanger: false,
    showLessItems: false
  };
  if (_typeof(pagination) === "object") {
    return _extends(_extends({}, defaultPagination), pagination);
  }
  return defaultPagination;
}
var ListBody = /* @__PURE__ */ function(_React$Component) {
  _inherits(ListBody2, _React$Component);
  var _super = _createSuper(ListBody2);
  function ListBody2() {
    var _this;
    _classCallCheck(this, ListBody2);
    _this = _super.apply(this, arguments);
    _this.state = {
      current: 1
    };
    _this.onItemSelect = function(item) {
      var _this$props = _this.props, onItemSelect = _this$props.onItemSelect, selectedKeys = _this$props.selectedKeys;
      var checked = selectedKeys.includes(item.key);
      onItemSelect(item.key, !checked);
    };
    _this.onItemRemove = function(item) {
      var onItemRemove = _this.props.onItemRemove;
      onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove([item.key]);
    };
    _this.onPageChange = function(current) {
      _this.setState({
        current
      });
    };
    _this.getItems = function() {
      var current = _this.state.current;
      var _this$props2 = _this.props, pagination = _this$props2.pagination, filteredRenderItems = _this$props2.filteredRenderItems;
      var mergedPagination = parsePagination(pagination);
      var displayItems = filteredRenderItems;
      if (mergedPagination) {
        displayItems = filteredRenderItems.slice((current - 1) * mergedPagination.pageSize, current * mergedPagination.pageSize);
      }
      return displayItems;
    };
    return _this;
  }
  _createClass(ListBody2, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var current = this.state.current;
      var _this$props3 = this.props, prefixCls = _this$props3.prefixCls, onScroll = _this$props3.onScroll, filteredRenderItems = _this$props3.filteredRenderItems, selectedKeys = _this$props3.selectedKeys, globalDisabled = _this$props3.disabled, showRemove = _this$props3.showRemove, pagination = _this$props3.pagination;
      var mergedPagination = parsePagination(pagination);
      var paginationNode = null;
      if (mergedPagination) {
        paginationNode = /* @__PURE__ */ React.createElement(Pagination, {
          simple: mergedPagination.simple,
          showSizeChanger: mergedPagination.showSizeChanger,
          showLessItems: mergedPagination.showLessItems,
          size: "small",
          disabled: globalDisabled,
          className: "".concat(prefixCls, "-pagination"),
          total: filteredRenderItems.length,
          pageSize: mergedPagination.pageSize,
          current,
          onChange: this.onPageChange
        });
      }
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("ul", {
        className: classNames("".concat(prefixCls, "-content"), _defineProperty({}, "".concat(prefixCls, "-content-show-remove"), showRemove)),
        onScroll
      }, this.getItems().map(function(_ref) {
        var renderedEl = _ref.renderedEl, renderedText = _ref.renderedText, item = _ref.item;
        var disabled = item.disabled;
        var checked = selectedKeys.includes(item.key);
        return /* @__PURE__ */ React.createElement(ListItem, {
          disabled: globalDisabled || disabled,
          key: item.key,
          item,
          renderedText,
          renderedEl,
          checked,
          prefixCls,
          onClick: _this2.onItemSelect,
          onRemove: _this2.onItemRemove,
          showRemove
        });
      })), paginationNode);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(_ref2, _ref3) {
      var filteredRenderItems = _ref2.filteredRenderItems, pagination = _ref2.pagination;
      var current = _ref3.current;
      var mergedPagination = parsePagination(pagination);
      if (mergedPagination) {
        var maxPageCount = Math.ceil(filteredRenderItems.length / mergedPagination.pageSize);
        if (current > maxPageCount) {
          return {
            current: maxPageCount
          };
        }
      }
      return null;
    }
  }]);
  return ListBody2;
}(React.Component);
const DefaultListBody = ListBody;
export {
  OmitProps,
  DefaultListBody as default
};
