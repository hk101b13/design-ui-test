import _defineProperty from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js";
import _slicedToArray from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";
import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import classNames from "../../../../../classnames@2.3.2/node_modules/classnames/index.js";
import Tooltip$2 from "../../../../../rc-tooltip@5.2.2_react-dom@18.2.0_react@18.2.0/node_modules/rc-tooltip/es/Tooltip.js";
import * as React from "react";
import useMergedState from "../../../../../rc-util@5.38.1_react-dom@18.2.0_react@18.2.0/node_modules/rc-util/es/hooks/useMergedState.js";
import "../../../../../rc-field-form@1.27.4_react-dom@18.2.0_react@18.2.0/node_modules/rc-field-form/es/index.js";
import { ConfigContext } from "../config-provider/context.js";
import { PresetColorTypes } from "../_util/colors.js";
import { getTransitionName } from "../_util/motion.js";
import getPlacements from "../_util/placements.js";
import { isValidElement, isFragment, cloneElement } from "../_util/reactNode.js";
import warning from "../_util/warning.js";
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var splitObject = function splitObject2(obj, keys) {
  var picked = {};
  var omitted = _extends({}, obj);
  keys.forEach(function(key) {
    if (obj && key in obj) {
      picked[key] = obj[key];
      delete omitted[key];
    }
  });
  return {
    picked,
    omitted
  };
};
var PresetColorRegex = new RegExp("^(".concat(PresetColorTypes.join("|"), ")(-inverse)?$"));
function getDisabledCompatibleChildren(element, prefixCls) {
  var elementType = element.type;
  if ((elementType.__ANT_BUTTON === true || element.type === "button") && element.props.disabled || elementType.__ANT_SWITCH === true && (element.props.disabled || element.props.loading) || elementType.__ANT_RADIO === true && element.props.disabled) {
    var _splitObject = splitObject(element.props.style, ["position", "left", "right", "top", "bottom", "float", "display", "zIndex"]), picked = _splitObject.picked, omitted = _splitObject.omitted;
    var spanStyle = _extends(_extends({
      display: "inline-block"
    }, picked), {
      cursor: "not-allowed",
      width: element.props.block ? "100%" : void 0
    });
    var buttonStyle = _extends(_extends({}, omitted), {
      pointerEvents: "none"
    });
    var child = cloneElement(element, {
      style: buttonStyle,
      className: null
    });
    return /* @__PURE__ */ React.createElement("span", {
      style: spanStyle,
      className: classNames(element.props.className, "".concat(prefixCls, "-disabled-compatible-wrapper"))
    }, child);
  }
  return element;
}
var Tooltip = /* @__PURE__ */ React.forwardRef(function(props, ref) {
  var _classNames2;
  var _React$useContext = React.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
  if (process.env.NODE_ENV !== "production") {
    [["visible", "open"], ["defaultVisible", "defaultOpen"], ["onVisibleChange", "onOpenChange"], ["afterVisibleChange", "afterOpenChange"]].forEach(function(_ref) {
      var _ref2 = _slicedToArray(_ref, 2), deprecatedName = _ref2[0], newName = _ref2[1];
      process.env.NODE_ENV !== "production" ? warning(!(deprecatedName in props), "Tooltip", "`".concat(deprecatedName, "` is deprecated which will be removed in next major version, please use `").concat(newName, "` instead.")) : void 0;
    });
  }
  var _useMergedState = useMergedState(false, {
    value: props.open !== void 0 ? props.open : props.visible,
    defaultValue: props.defaultOpen !== void 0 ? props.defaultOpen : props.defaultVisible
  }), _useMergedState2 = _slicedToArray(_useMergedState, 2), open = _useMergedState2[0], setOpen = _useMergedState2[1];
  var isNoTitle = function isNoTitle2() {
    var title = props.title, overlay = props.overlay;
    return !title && !overlay && title !== 0;
  };
  var onOpenChange = function onOpenChange2(vis) {
    var _a, _b;
    setOpen(isNoTitle() ? false : vis);
    if (!isNoTitle()) {
      (_a = props.onOpenChange) === null || _a === void 0 ? void 0 : _a.call(props, vis);
      (_b = props.onVisibleChange) === null || _b === void 0 ? void 0 : _b.call(props, vis);
    }
  };
  var getTooltipPlacements = function getTooltipPlacements2() {
    var builtinPlacements = props.builtinPlacements, _props$arrowPointAtCe = props.arrowPointAtCenter, arrowPointAtCenter = _props$arrowPointAtCe === void 0 ? false : _props$arrowPointAtCe, _props$autoAdjustOver = props.autoAdjustOverflow, autoAdjustOverflow = _props$autoAdjustOver === void 0 ? true : _props$autoAdjustOver;
    return builtinPlacements || getPlacements({
      arrowPointAtCenter,
      autoAdjustOverflow
    });
  };
  var onPopupAlign = function onPopupAlign2(domNode, align) {
    var placements = getTooltipPlacements();
    var placement2 = Object.keys(placements).find(function(key) {
      var _a, _b;
      return placements[key].points[0] === ((_a = align.points) === null || _a === void 0 ? void 0 : _a[0]) && placements[key].points[1] === ((_b = align.points) === null || _b === void 0 ? void 0 : _b[1]);
    });
    if (!placement2) {
      return;
    }
    var rect = domNode.getBoundingClientRect();
    var transformOrigin = {
      top: "50%",
      left: "50%"
    };
    if (/top|Bottom/.test(placement2)) {
      transformOrigin.top = "".concat(rect.height - align.offset[1], "px");
    } else if (/Top|bottom/.test(placement2)) {
      transformOrigin.top = "".concat(-align.offset[1], "px");
    }
    if (/left|Right/.test(placement2)) {
      transformOrigin.left = "".concat(rect.width - align.offset[0], "px");
    } else if (/right|Left/.test(placement2)) {
      transformOrigin.left = "".concat(-align.offset[0], "px");
    }
    domNode.style.transformOrigin = "".concat(transformOrigin.left, " ").concat(transformOrigin.top);
  };
  var getOverlay = function getOverlay2() {
    var title = props.title, overlay = props.overlay;
    if (title === 0) {
      return title;
    }
    return overlay || title || "";
  };
  var getPopupContainer = props.getPopupContainer, _props$placement = props.placement, placement = _props$placement === void 0 ? "top" : _props$placement, _props$mouseEnterDela = props.mouseEnterDelay, mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0.1 : _props$mouseEnterDela, _props$mouseLeaveDela = props.mouseLeaveDelay, mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela, otherProps = __rest(props, ["getPopupContainer", "placement", "mouseEnterDelay", "mouseLeaveDelay"]);
  var customizePrefixCls = props.prefixCls, openClassName = props.openClassName, getTooltipContainer = props.getTooltipContainer, overlayClassName = props.overlayClassName, color = props.color, overlayInnerStyle = props.overlayInnerStyle, children = props.children;
  var prefixCls = getPrefixCls("tooltip", customizePrefixCls);
  var rootPrefixCls = getPrefixCls();
  var tempOpen = open;
  if (!("open" in props) && !("visible" in props) && isNoTitle()) {
    tempOpen = false;
  }
  var child = getDisabledCompatibleChildren(isValidElement(children) && !isFragment(children) ? children : /* @__PURE__ */ React.createElement("span", null, children), prefixCls);
  var childProps = child.props;
  var childCls = !childProps.className || typeof childProps.className === "string" ? classNames(childProps.className, _defineProperty({}, openClassName || "".concat(prefixCls, "-open"), true)) : childProps.className;
  var customOverlayClassName = classNames(overlayClassName, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-").concat(color), color && PresetColorRegex.test(color)), _classNames2));
  var formattedOverlayInnerStyle = overlayInnerStyle;
  var arrowContentStyle = {};
  if (color && !PresetColorRegex.test(color)) {
    formattedOverlayInnerStyle = _extends(_extends({}, overlayInnerStyle), {
      background: color
    });
    arrowContentStyle = {
      "--antd-arrow-background-color": color
    };
  }
  return /* @__PURE__ */ React.createElement(Tooltip$2, _extends({}, otherProps, {
    placement,
    mouseEnterDelay,
    mouseLeaveDelay,
    prefixCls,
    overlayClassName: customOverlayClassName,
    getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,
    ref,
    builtinPlacements: getTooltipPlacements(),
    overlay: getOverlay(),
    visible: tempOpen,
    onVisibleChange: onOpenChange,
    onPopupAlign,
    overlayInnerStyle: formattedOverlayInnerStyle,
    arrowContent: /* @__PURE__ */ React.createElement("span", {
      className: "".concat(prefixCls, "-arrow-content"),
      style: arrowContentStyle
    }),
    motion: {
      motionName: getTransitionName(rootPrefixCls, "zoom-big-fast", props.transitionName),
      motionDeadline: 1e3
    }
  }), tempOpen ? cloneElement(child, {
    className: childCls
  }) : child);
});
if (process.env.NODE_ENV !== "production") {
  Tooltip.displayName = "Tooltip";
}
const Tooltip$1 = Tooltip;
export {
  Tooltip$1 as default
};
