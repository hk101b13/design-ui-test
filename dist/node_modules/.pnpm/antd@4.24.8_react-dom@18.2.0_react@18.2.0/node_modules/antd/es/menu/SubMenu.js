import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import classNames from "../../../../../classnames@2.3.2/node_modules/classnames/index.js";
import "../../../../../rc-menu@9.8.4_react-dom@18.2.0_react@18.2.0/node_modules/rc-menu/es/index.js";
import omit from "../../../../../rc-util@5.38.1_react-dom@18.2.0_react@18.2.0/node_modules/rc-util/es/omit.js";
import * as React from "react";
import { isValidElement, cloneElement } from "../_util/reactNode.js";
import MenuContext from "./MenuContext.js";
import { useFullPath } from "../../../../../rc-menu@9.8.4_react-dom@18.2.0_react@18.2.0/node_modules/rc-menu/es/context/PathContext.js";
import SubMenu$1 from "../../../../../rc-menu@9.8.4_react-dom@18.2.0_react@18.2.0/node_modules/rc-menu/es/SubMenu/index.js";
function SubMenu(props) {
  var _a;
  var popupClassName = props.popupClassName, icon = props.icon, title = props.title, theme = props.theme;
  var context = React.useContext(MenuContext);
  var prefixCls = context.prefixCls, inlineCollapsed = context.inlineCollapsed, antdMenuTheme = context.antdMenuTheme;
  var parentPath = useFullPath();
  var titleNode;
  if (!icon) {
    titleNode = inlineCollapsed && !parentPath.length && title && typeof title === "string" ? /* @__PURE__ */ React.createElement("div", {
      className: "".concat(prefixCls, "-inline-collapsed-noicon")
    }, title.charAt(0)) : /* @__PURE__ */ React.createElement("span", {
      className: "".concat(prefixCls, "-title-content")
    }, title);
  } else {
    var titleIsSpan = isValidElement(title) && title.type === "span";
    titleNode = /* @__PURE__ */ React.createElement(React.Fragment, null, cloneElement(icon, {
      className: classNames(isValidElement(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : "", "".concat(prefixCls, "-item-icon"))
    }), titleIsSpan ? title : /* @__PURE__ */ React.createElement("span", {
      className: "".concat(prefixCls, "-title-content")
    }, title));
  }
  var contextValue = React.useMemo(function() {
    return _extends(_extends({}, context), {
      firstLevel: false
    });
  }, [context]);
  return /* @__PURE__ */ React.createElement(MenuContext.Provider, {
    value: contextValue
  }, /* @__PURE__ */ React.createElement(SubMenu$1, _extends({}, omit(props, ["icon"]), {
    title: titleNode,
    popupClassName: classNames(prefixCls, "".concat(prefixCls, "-").concat(theme || antdMenuTheme), popupClassName)
  })));
}
export {
  SubMenu as default
};
