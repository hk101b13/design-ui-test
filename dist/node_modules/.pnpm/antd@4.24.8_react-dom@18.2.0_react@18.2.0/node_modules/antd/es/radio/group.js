import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import _defineProperty from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js";
import _slicedToArray from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";
import classNames from "../../../../../classnames@2.3.2/node_modules/classnames/index.js";
import useMergedState from "../../../../../rc-util@5.38.1_react-dom@18.2.0_react@18.2.0/node_modules/rc-util/es/hooks/useMergedState.js";
import * as React from "react";
import "../../../../../rc-field-form@1.27.4_react-dom@18.2.0_react@18.2.0/node_modules/rc-field-form/es/index.js";
import { ConfigContext } from "../config-provider/context.js";
import SizeContext from "../config-provider/SizeContext.js";
import getDataOrAriaProps from "../_util/getDataOrAriaProps.js";
import { RadioGroupContextProvider } from "./context.js";
import InternalRadio from "./radio.js";
var RadioGroup = /* @__PURE__ */ React.forwardRef(function(props, ref) {
  var _classNames;
  var _React$useContext = React.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
  var size = React.useContext(SizeContext);
  var _useMergedState = useMergedState(props.defaultValue, {
    value: props.value
  }), _useMergedState2 = _slicedToArray(_useMergedState, 2), value = _useMergedState2[0], setValue = _useMergedState2[1];
  var onRadioChange = function onRadioChange2(ev) {
    var lastValue = value;
    var val = ev.target.value;
    if (!("value" in props)) {
      setValue(val);
    }
    var onChange = props.onChange;
    if (onChange && val !== lastValue) {
      onChange(ev);
    }
  };
  var customizePrefixCls = props.prefixCls, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, options = props.options, _props$buttonStyle = props.buttonStyle, buttonStyle = _props$buttonStyle === void 0 ? "outline" : _props$buttonStyle, disabled = props.disabled, children = props.children, customizeSize = props.size, style = props.style, id = props.id, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, onFocus = props.onFocus, onBlur = props.onBlur;
  var prefixCls = getPrefixCls("radio", customizePrefixCls);
  var groupPrefixCls = "".concat(prefixCls, "-group");
  var childrenToRender = children;
  if (options && options.length > 0) {
    childrenToRender = options.map(function(option) {
      if (typeof option === "string" || typeof option === "number") {
        return /* @__PURE__ */ React.createElement(InternalRadio, {
          key: option.toString(),
          prefixCls,
          disabled,
          value: option,
          checked: value === option
        }, option);
      }
      return /* @__PURE__ */ React.createElement(InternalRadio, {
        key: "radio-group-value-options-".concat(option.value),
        prefixCls,
        disabled: option.disabled || disabled,
        value: option.value,
        checked: value === option.value,
        style: option.style
      }, option.label);
    });
  }
  var mergedSize = customizeSize || size;
  var classString = classNames(groupPrefixCls, "".concat(groupPrefixCls, "-").concat(buttonStyle), (_classNames = {}, _defineProperty(_classNames, "".concat(groupPrefixCls, "-").concat(mergedSize), mergedSize), _defineProperty(_classNames, "".concat(groupPrefixCls, "-rtl"), direction === "rtl"), _classNames), className);
  return /* @__PURE__ */ React.createElement("div", _extends({}, getDataOrAriaProps(props), {
    className: classString,
    style,
    onMouseEnter,
    onMouseLeave,
    onFocus,
    onBlur,
    id,
    ref
  }), /* @__PURE__ */ React.createElement(RadioGroupContextProvider, {
    value: {
      onChange: onRadioChange,
      value,
      disabled: props.disabled,
      name: props.name,
      optionType: props.optionType
    }
  }, childrenToRender));
});
const Group = /* @__PURE__ */ React.memo(RadioGroup);
export {
  Group as default
};
