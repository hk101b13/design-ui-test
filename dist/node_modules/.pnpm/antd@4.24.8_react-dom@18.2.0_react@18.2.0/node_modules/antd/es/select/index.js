import _defineProperty from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js";
import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import classNames from "../../../../../classnames@2.3.2/node_modules/classnames/index.js";
import TypedSelect from "../../../../../rc-select@14.1.18_react-dom@18.2.0_react@18.2.0/node_modules/rc-select/es/Select.js";
import Option from "../../../../../rc-select@14.1.18_react-dom@18.2.0_react@18.2.0/node_modules/rc-select/es/Option.js";
import OptGroup from "../../../../../rc-select@14.1.18_react-dom@18.2.0_react@18.2.0/node_modules/rc-select/es/OptGroup.js";
import "../../../../../rc-select@14.1.18_react-dom@18.2.0_react@18.2.0/node_modules/rc-select/es/BaseSelect.js";
import * as React from "react";
import { useContext } from "react";
import omit from "../../../../../rc-util@5.38.1_react-dom@18.2.0_react@18.2.0/node_modules/rc-util/es/omit.js";
import "../../../../../rc-field-form@1.27.4_react-dom@18.2.0_react@18.2.0/node_modules/rc-field-form/es/index.js";
import { ConfigContext } from "../config-provider/context.js";
import DisabledContext from "../config-provider/DisabledContext.js";
import SizeContext from "../config-provider/SizeContext.js";
import defaultRenderEmpty from "../config-provider/defaultRenderEmpty.js";
import { FormItemInputContext } from "../form/context.js";
import { getTransitionName, getTransitionDirection } from "../_util/motion.js";
import { getStatusClassNames, getMergedStatus } from "../_util/statusUtils.js";
import getIcons from "./utils/iconUtil.js";
import warning from "../_util/warning.js";
import { useCompactItemContext } from "../space/Compact.js";
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var SECRET_COMBOBOX_MODE_DO_NOT_USE = "SECRET_COMBOBOX_MODE_DO_NOT_USE";
var InternalSelect = function InternalSelect2(_a, ref) {
  var _classNames2;
  var customizePrefixCls = _a.prefixCls, _a$bordered = _a.bordered, bordered = _a$bordered === void 0 ? true : _a$bordered, className = _a.className, getPopupContainer = _a.getPopupContainer, dropdownClassName = _a.dropdownClassName, popupClassName = _a.popupClassName, _a$listHeight = _a.listHeight, listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight, placement = _a.placement, _a$listItemHeight = _a.listItemHeight, listItemHeight = _a$listItemHeight === void 0 ? 24 : _a$listItemHeight, customizeSize = _a.size, customDisabled = _a.disabled, notFoundContent = _a.notFoundContent, customStatus = _a.status, showArrow = _a.showArrow, props = __rest(_a, ["prefixCls", "bordered", "className", "getPopupContainer", "dropdownClassName", "popupClassName", "listHeight", "placement", "listItemHeight", "size", "disabled", "notFoundContent", "status", "showArrow"]);
  var _React$useContext = React.useContext(ConfigContext), getContextPopupContainer = _React$useContext.getPopupContainer, getPrefixCls = _React$useContext.getPrefixCls, renderEmpty = _React$useContext.renderEmpty, direction = _React$useContext.direction, virtual = _React$useContext.virtual, dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;
  var size = React.useContext(SizeContext);
  var prefixCls = getPrefixCls("select", customizePrefixCls);
  var rootPrefixCls = getPrefixCls();
  var _useCompactItemContex = useCompactItemContext(prefixCls, direction), compactSize = _useCompactItemContex.compactSize, compactItemClassnames = _useCompactItemContex.compactItemClassnames;
  var mode = React.useMemo(function() {
    var m = props.mode;
    if (m === "combobox") {
      return void 0;
    }
    if (m === SECRET_COMBOBOX_MODE_DO_NOT_USE) {
      return "combobox";
    }
    return m;
  }, [props.mode]);
  var isMultiple = mode === "multiple" || mode === "tags";
  var mergedShowArrow = showArrow !== void 0 ? showArrow : props.loading || !(isMultiple || mode === "combobox");
  process.env.NODE_ENV !== "production" ? warning(!dropdownClassName, "Select", "`dropdownClassName` is deprecated which will be removed in next major version. Please use `popupClassName` instead.") : void 0;
  var _useContext = useContext(FormItemInputContext), contextStatus = _useContext.status, hasFeedback = _useContext.hasFeedback, isFormItemInput = _useContext.isFormItemInput, feedbackIcon = _useContext.feedbackIcon;
  var mergedStatus = getMergedStatus(contextStatus, customStatus);
  var mergedNotFound;
  if (notFoundContent !== void 0) {
    mergedNotFound = notFoundContent;
  } else if (mode === "combobox") {
    mergedNotFound = null;
  } else {
    mergedNotFound = (renderEmpty || defaultRenderEmpty)("Select");
  }
  var _getIcons = getIcons(_extends(_extends({}, props), {
    multiple: isMultiple,
    hasFeedback,
    feedbackIcon,
    showArrow: mergedShowArrow,
    prefixCls
  })), suffixIcon = _getIcons.suffixIcon, itemIcon = _getIcons.itemIcon, removeIcon = _getIcons.removeIcon, clearIcon = _getIcons.clearIcon;
  var selectProps = omit(props, ["suffixIcon", "itemIcon"]);
  var rcSelectRtlDropdownClassName = classNames(popupClassName || dropdownClassName, _defineProperty({}, "".concat(prefixCls, "-dropdown-").concat(direction), direction === "rtl"));
  var mergedSize = compactSize || customizeSize || size;
  var disabled = React.useContext(DisabledContext);
  var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;
  var mergedClassName = classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-lg"), mergedSize === "large"), _defineProperty(_classNames2, "".concat(prefixCls, "-sm"), mergedSize === "small"), _defineProperty(_classNames2, "".concat(prefixCls, "-rtl"), direction === "rtl"), _defineProperty(_classNames2, "".concat(prefixCls, "-borderless"), !bordered), _defineProperty(_classNames2, "".concat(prefixCls, "-in-form-item"), isFormItemInput), _classNames2), getStatusClassNames(prefixCls, mergedStatus, hasFeedback), compactItemClassnames, className);
  var getPlacement = function getPlacement2() {
    if (placement !== void 0) {
      return placement;
    }
    return direction === "rtl" ? "bottomRight" : "bottomLeft";
  };
  return /* @__PURE__ */ React.createElement(TypedSelect, _extends({
    ref,
    virtual,
    dropdownMatchSelectWidth
  }, selectProps, {
    transitionName: getTransitionName(rootPrefixCls, getTransitionDirection(placement), props.transitionName),
    listHeight,
    listItemHeight,
    mode,
    prefixCls,
    placement: getPlacement(),
    direction,
    inputIcon: suffixIcon,
    menuItemSelectedIcon: itemIcon,
    removeIcon,
    clearIcon,
    notFoundContent: mergedNotFound,
    className: mergedClassName,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    dropdownClassName: rcSelectRtlDropdownClassName,
    showArrow: hasFeedback || showArrow,
    disabled: mergedDisabled
  }));
};
var Select = /* @__PURE__ */ React.forwardRef(InternalSelect);
Select.SECRET_COMBOBOX_MODE_DO_NOT_USE = SECRET_COMBOBOX_MODE_DO_NOT_USE;
Select.Option = Option;
Select.OptGroup = OptGroup;
const Select$1 = Select;
export {
  Select$1 as default
};
