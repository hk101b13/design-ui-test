import _defineProperty from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js";
import _typeof from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/typeof.js";
import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import HolderOutlined from "../../../../../@ant-design_icons@4.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/HolderOutlined.js";
import classNames from "../../../../../classnames@2.3.2/node_modules/classnames/index.js";
import Tree$1 from "../../../../../rc-tree@5.7.12_react-dom@18.2.0_react@18.2.0/node_modules/rc-tree/es/Tree.js";
import "../../../../../rc-tree@5.7.12_react-dom@18.2.0_react@18.2.0/node_modules/rc-tree/es/TreeNode.js";
import * as React from "react";
import "../../../../../rc-field-form@1.27.4_react-dom@18.2.0_react@18.2.0/node_modules/rc-field-form/es/index.js";
import { ConfigContext } from "../config-provider/context.js";
import collapseMotion from "../_util/motion.js";
import dropIndicatorRender from "./utils/dropIndicator.js";
import renderSwitcherIcon from "./utils/iconUtil.js";
var Tree = /* @__PURE__ */ React.forwardRef(function(props, ref) {
  var _classNames;
  var _React$useContext = React.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction, virtual = _React$useContext.virtual;
  var customizePrefixCls = props.prefixCls, className = props.className, _props$showIcon = props.showIcon, showIcon = _props$showIcon === void 0 ? false : _props$showIcon, showLine = props.showLine, _switcherIcon = props.switcherIcon, _props$blockNode = props.blockNode, blockNode = _props$blockNode === void 0 ? false : _props$blockNode, children = props.children, _props$checkable = props.checkable, checkable = _props$checkable === void 0 ? false : _props$checkable, _props$selectable = props.selectable, selectable = _props$selectable === void 0 ? true : _props$selectable, draggable = props.draggable, _props$motion = props.motion, motion = _props$motion === void 0 ? _extends(_extends({}, collapseMotion), {
    motionAppear: false
  }) : _props$motion;
  var prefixCls = getPrefixCls("tree", customizePrefixCls);
  var newProps = _extends(_extends({}, props), {
    checkable,
    selectable,
    showIcon,
    motion,
    blockNode,
    showLine: Boolean(showLine),
    dropIndicatorRender
  });
  var draggableConfig = React.useMemo(function() {
    if (!draggable) {
      return false;
    }
    var mergedDraggable = {};
    switch (_typeof(draggable)) {
      case "function":
        mergedDraggable.nodeDraggable = draggable;
        break;
      case "object":
        mergedDraggable = _extends({}, draggable);
        break;
    }
    if (mergedDraggable.icon !== false) {
      mergedDraggable.icon = mergedDraggable.icon || /* @__PURE__ */ React.createElement(HolderOutlined, null);
    }
    return mergedDraggable;
  }, [draggable]);
  return /* @__PURE__ */ React.createElement(Tree$1, _extends({
    itemHeight: 20,
    ref,
    virtual
  }, newProps, {
    prefixCls,
    className: classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-icon-hide"), !showIcon), _defineProperty(_classNames, "".concat(prefixCls, "-block-node"), blockNode), _defineProperty(_classNames, "".concat(prefixCls, "-unselectable"), !selectable), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === "rtl"), _classNames), className),
    direction,
    checkable: checkable ? /* @__PURE__ */ React.createElement("span", {
      className: "".concat(prefixCls, "-checkbox-inner")
    }) : checkable,
    selectable,
    switcherIcon: function switcherIcon(nodeProps) {
      return renderSwitcherIcon(prefixCls, _switcherIcon, showLine, nodeProps);
    },
    draggable: draggableConfig
  }), children);
});
const TreePure = Tree;
export {
  TreePure as default
};
