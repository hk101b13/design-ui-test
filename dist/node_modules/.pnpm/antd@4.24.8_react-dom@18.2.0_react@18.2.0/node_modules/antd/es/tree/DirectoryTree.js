import _defineProperty from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js";
import _toConsumableArray from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js";
import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import _slicedToArray from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";
import FileOutlined from "../../../../../@ant-design_icons@4.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/FileOutlined.js";
import FolderOpenOutlined from "../../../../../@ant-design_icons@4.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/FolderOpenOutlined.js";
import FolderOutlined from "../../../../../@ant-design_icons@4.8.1_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/icons/es/icons/FolderOutlined.js";
import classNames from "../../../../../classnames@2.3.2/node_modules/classnames/index.js";
import { conductExpandParent } from "../../../../../rc-tree@5.7.12_react-dom@18.2.0_react@18.2.0/node_modules/rc-tree/es/util.js";
import { convertDataToEntities, convertTreeToData } from "../../../../../rc-tree@5.7.12_react-dom@18.2.0_react@18.2.0/node_modules/rc-tree/es/utils/treeUtil.js";
import * as React from "react";
import "../../../../../rc-field-form@1.27.4_react-dom@18.2.0_react@18.2.0/node_modules/rc-field-form/es/index.js";
import { ConfigContext } from "../config-provider/context.js";
import TreePure from "./Tree.js";
import { convertDirectoryKeysToNodes, calcRangeKeys } from "./utils/dictUtil.js";
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function getIcon(props) {
  var isLeaf = props.isLeaf, expanded = props.expanded;
  if (isLeaf) {
    return /* @__PURE__ */ React.createElement(FileOutlined, null);
  }
  return expanded ? /* @__PURE__ */ React.createElement(FolderOpenOutlined, null) : /* @__PURE__ */ React.createElement(FolderOutlined, null);
}
function getTreeData(_ref) {
  var treeData = _ref.treeData, children = _ref.children;
  return treeData || convertTreeToData(children);
}
var DirectoryTree = function DirectoryTree2(_a, ref) {
  var defaultExpandAll = _a.defaultExpandAll, defaultExpandParent = _a.defaultExpandParent, defaultExpandedKeys = _a.defaultExpandedKeys, props = __rest(_a, ["defaultExpandAll", "defaultExpandParent", "defaultExpandedKeys"]);
  var lastSelectedKey = React.useRef();
  var cachedSelectedKeys = React.useRef();
  var getInitExpandedKeys = function getInitExpandedKeys2() {
    var _convertDataToEntitie = convertDataToEntities(getTreeData(props)), keyEntities = _convertDataToEntitie.keyEntities;
    var initExpandedKeys;
    if (defaultExpandAll) {
      initExpandedKeys = Object.keys(keyEntities);
    } else if (defaultExpandParent) {
      initExpandedKeys = conductExpandParent(props.expandedKeys || defaultExpandedKeys || [], keyEntities);
    } else {
      initExpandedKeys = props.expandedKeys || defaultExpandedKeys;
    }
    return initExpandedKeys;
  };
  var _React$useState = React.useState(props.selectedKeys || props.defaultSelectedKeys || []), _React$useState2 = _slicedToArray(_React$useState, 2), selectedKeys = _React$useState2[0], setSelectedKeys = _React$useState2[1];
  var _React$useState3 = React.useState(function() {
    return getInitExpandedKeys();
  }), _React$useState4 = _slicedToArray(_React$useState3, 2), expandedKeys = _React$useState4[0], setExpandedKeys = _React$useState4[1];
  React.useEffect(function() {
    if ("selectedKeys" in props) {
      setSelectedKeys(props.selectedKeys);
    }
  }, [props.selectedKeys]);
  React.useEffect(function() {
    if ("expandedKeys" in props) {
      setExpandedKeys(props.expandedKeys);
    }
  }, [props.expandedKeys]);
  var onExpand = function onExpand2(keys, info) {
    var _a2;
    if (!("expandedKeys" in props)) {
      setExpandedKeys(keys);
    }
    return (_a2 = props.onExpand) === null || _a2 === void 0 ? void 0 : _a2.call(props, keys, info);
  };
  var onSelect = function onSelect2(keys, event) {
    var _a2;
    var multiple = props.multiple;
    var node = event.node, nativeEvent = event.nativeEvent;
    var _node$key = node.key, key = _node$key === void 0 ? "" : _node$key;
    var treeData = getTreeData(props);
    var newEvent = _extends(_extends({}, event), {
      selected: true
    });
    var ctrlPick = (nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.ctrlKey) || (nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.metaKey);
    var shiftPick = nativeEvent === null || nativeEvent === void 0 ? void 0 : nativeEvent.shiftKey;
    var newSelectedKeys;
    if (multiple && ctrlPick) {
      newSelectedKeys = keys;
      lastSelectedKey.current = key;
      cachedSelectedKeys.current = newSelectedKeys;
      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
    } else if (multiple && shiftPick) {
      newSelectedKeys = Array.from(new Set([].concat(_toConsumableArray(cachedSelectedKeys.current || []), _toConsumableArray(calcRangeKeys({
        treeData,
        expandedKeys,
        startKey: key,
        endKey: lastSelectedKey.current
      })))));
      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
    } else {
      newSelectedKeys = [key];
      lastSelectedKey.current = key;
      cachedSelectedKeys.current = newSelectedKeys;
      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
    }
    (_a2 = props.onSelect) === null || _a2 === void 0 ? void 0 : _a2.call(props, newSelectedKeys, newEvent);
    if (!("selectedKeys" in props)) {
      setSelectedKeys(newSelectedKeys);
    }
  };
  var _React$useContext = React.useContext(ConfigContext), getPrefixCls = _React$useContext.getPrefixCls, direction = _React$useContext.direction;
  var customizePrefixCls = props.prefixCls, className = props.className, _props$showIcon = props.showIcon, showIcon = _props$showIcon === void 0 ? true : _props$showIcon, _props$expandAction = props.expandAction, expandAction = _props$expandAction === void 0 ? "click" : _props$expandAction, otherProps = __rest(props, ["prefixCls", "className", "showIcon", "expandAction"]);
  var prefixCls = getPrefixCls("tree", customizePrefixCls);
  var connectClassName = classNames("".concat(prefixCls, "-directory"), _defineProperty({}, "".concat(prefixCls, "-directory-rtl"), direction === "rtl"), className);
  return /* @__PURE__ */ React.createElement(TreePure, _extends({
    icon: getIcon,
    ref,
    blockNode: true
  }, otherProps, {
    showIcon,
    expandAction,
    prefixCls,
    className: connectClassName,
    expandedKeys,
    selectedKeys,
    onSelect,
    onExpand
  }));
};
var ForwardDirectoryTree = /* @__PURE__ */ React.forwardRef(DirectoryTree);
if (process.env.NODE_ENV !== "production") {
  ForwardDirectoryTree.displayName = "DirectoryTree";
}
const DirectoryTree$1 = ForwardDirectoryTree;
export {
  DirectoryTree$1 as default
};
