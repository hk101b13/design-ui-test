import _defineProperty from "../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/defineProperty.js";
import _typeof from "../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/typeof.js";
import React__default, { useRef, cloneElement } from "react";
import classNames from "../../../../classnames@2.3.2/node_modules/classnames/index.js";
import { hasPrefixSuffix, hasAddon } from "./utils/commonUtils.js";
var BaseInput = function BaseInput2(props) {
  var inputElement = props.inputElement, prefixCls = props.prefixCls, prefix = props.prefix, suffix = props.suffix, addonBefore = props.addonBefore, addonAfter = props.addonAfter, className = props.className, style = props.style, affixWrapperClassName = props.affixWrapperClassName, groupClassName = props.groupClassName, wrapperClassName = props.wrapperClassName, disabled = props.disabled, readOnly = props.readOnly, focused = props.focused, triggerFocus = props.triggerFocus, allowClear = props.allowClear, value = props.value, handleReset = props.handleReset, hidden = props.hidden;
  var containerRef = useRef(null);
  var onInputClick = function onInputClick2(e) {
    var _containerRef$current;
    if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(e.target)) {
      triggerFocus === null || triggerFocus === void 0 ? void 0 : triggerFocus();
    }
  };
  var getClearIcon = function getClearIcon2() {
    var _classNames;
    if (!allowClear) {
      return null;
    }
    var needClear = !disabled && !readOnly && value;
    var clearIconCls = "".concat(prefixCls, "-clear-icon");
    var iconNode = _typeof(allowClear) === "object" && allowClear !== null && allowClear !== void 0 && allowClear.clearIcon ? allowClear.clearIcon : "âœ–";
    return /* @__PURE__ */ React__default.createElement("span", {
      onClick: handleReset,
      onMouseDown: function onMouseDown(e) {
        return e.preventDefault();
      },
      className: classNames(clearIconCls, (_classNames = {}, _defineProperty(_classNames, "".concat(clearIconCls, "-hidden"), !needClear), _defineProperty(_classNames, "".concat(clearIconCls, "-has-suffix"), !!suffix), _classNames)),
      role: "button",
      tabIndex: -1
    }, iconNode);
  };
  var element = /* @__PURE__ */ cloneElement(inputElement, {
    value,
    hidden
  });
  if (hasPrefixSuffix(props)) {
    var _classNames2;
    var affixWrapperPrefixCls = "".concat(prefixCls, "-affix-wrapper");
    var affixWrapperCls = classNames(affixWrapperPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-disabled"), disabled), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-focused"), focused), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-readonly"), readOnly), _defineProperty(_classNames2, "".concat(affixWrapperPrefixCls, "-input-with-clear-btn"), suffix && allowClear && value), _classNames2), !hasAddon(props) && className, affixWrapperClassName);
    var suffixNode = (suffix || allowClear) && /* @__PURE__ */ React__default.createElement("span", {
      className: "".concat(prefixCls, "-suffix")
    }, getClearIcon(), suffix);
    element = /* @__PURE__ */ React__default.createElement("span", {
      className: affixWrapperCls,
      style,
      hidden: !hasAddon(props) && hidden,
      onClick: onInputClick,
      ref: containerRef
    }, prefix && /* @__PURE__ */ React__default.createElement("span", {
      className: "".concat(prefixCls, "-prefix")
    }, prefix), /* @__PURE__ */ cloneElement(inputElement, {
      style: null,
      value,
      hidden: null
    }), suffixNode);
  }
  if (hasAddon(props)) {
    var wrapperCls = "".concat(prefixCls, "-group");
    var addonCls = "".concat(wrapperCls, "-addon");
    var mergedWrapperClassName = classNames("".concat(prefixCls, "-wrapper"), wrapperCls, wrapperClassName);
    var mergedGroupClassName = classNames("".concat(prefixCls, "-group-wrapper"), className, groupClassName);
    return /* @__PURE__ */ React__default.createElement("span", {
      className: mergedGroupClassName,
      style,
      hidden
    }, /* @__PURE__ */ React__default.createElement("span", {
      className: mergedWrapperClassName
    }, addonBefore && /* @__PURE__ */ React__default.createElement("span", {
      className: addonCls
    }, addonBefore), /* @__PURE__ */ cloneElement(element, {
      style: null,
      hidden: null
    }), addonAfter && /* @__PURE__ */ React__default.createElement("span", {
      className: addonCls
    }, addonAfter)));
  }
  return element;
};
export {
  BaseInput as default
};
