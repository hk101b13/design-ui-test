import * as React from "react";
import WrappedCell from "../Cell/index.js";
import TableContext from "../context/TableContext.js";
import ExpandedRowContext from "../context/ExpandedRowContext.js";
function ExpandedRow(_ref) {
  var prefixCls = _ref.prefixCls, children = _ref.children, Component = _ref.component, cellComponent = _ref.cellComponent, className = _ref.className, expanded = _ref.expanded, colSpan = _ref.colSpan, isEmpty = _ref.isEmpty;
  var _React$useContext = React.useContext(TableContext), scrollbarSize = _React$useContext.scrollbarSize;
  var _React$useContext2 = React.useContext(ExpandedRowContext), fixHeader = _React$useContext2.fixHeader, fixColumn = _React$useContext2.fixColumn, componentWidth = _React$useContext2.componentWidth, horizonScroll = _React$useContext2.horizonScroll;
  return React.useMemo(function() {
    var contentNode = children;
    if (isEmpty ? horizonScroll : fixColumn) {
      contentNode = /* @__PURE__ */ React.createElement("div", {
        style: {
          width: componentWidth - (fixHeader ? scrollbarSize : 0),
          position: "sticky",
          left: 0,
          overflow: "hidden"
        },
        className: "".concat(prefixCls, "-expanded-row-fixed")
      }, componentWidth !== 0 && contentNode);
    }
    return /* @__PURE__ */ React.createElement(Component, {
      className,
      style: {
        display: expanded ? null : "none"
      }
    }, /* @__PURE__ */ React.createElement(WrappedCell, {
      component: cellComponent,
      prefixCls,
      colSpan
    }, contentNode));
  }, [children, Component, className, expanded, colSpan, isEmpty, scrollbarSize, componentWidth, fixColumn, fixHeader, horizonScroll]);
}
export {
  ExpandedRow as default
};
