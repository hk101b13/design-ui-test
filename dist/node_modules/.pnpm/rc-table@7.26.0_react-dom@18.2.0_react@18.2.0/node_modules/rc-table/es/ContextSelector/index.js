import _slicedToArray from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";
import * as React from "react";
import useLayoutEffect from "../../../../../rc-util@5.38.1_react-dom@18.2.0_react@18.2.0/node_modules/rc-util/es/hooks/useLayoutEffect.js";
import useEvent from "../../../../../rc-util@5.38.1_react-dom@18.2.0_react@18.2.0/node_modules/rc-util/es/hooks/useEvent.js";
import shallowEqual from "../../../../../shallowequal@1.1.0/node_modules/shallowequal/index.js";
function createContext() {
  var Context = /* @__PURE__ */ React.createContext(null);
  var Provider = function Provider2(_ref) {
    var value = _ref.value, children = _ref.children;
    var valueRef = React.useRef(value);
    valueRef.current = value;
    var _React$useState = React.useState(function() {
      return {
        getValue: function getValue() {
          return valueRef.current;
        },
        listeners: /* @__PURE__ */ new Set()
      };
    }), _React$useState2 = _slicedToArray(_React$useState, 1), context = _React$useState2[0];
    useLayoutEffect(function() {
      context.listeners.forEach(function(listener) {
        listener(value);
      });
    }, [value]);
    return /* @__PURE__ */ React.createElement(Context.Provider, {
      value: context
    }, children);
  };
  return {
    Context,
    Provider
  };
}
function useContextSelector(holder, selector) {
  var eventSelector = useEvent(selector);
  var context = React.useContext(holder === null || holder === void 0 ? void 0 : holder.Context);
  var _ref2 = context || {}, listeners = _ref2.listeners, getValue = _ref2.getValue;
  var _React$useState3 = React.useState(function() {
    return eventSelector(context ? getValue() : null);
  }), _React$useState4 = _slicedToArray(_React$useState3, 2), value = _React$useState4[0], setValue = _React$useState4[1];
  useLayoutEffect(function() {
    if (!context) {
      return;
    }
    function trigger(nextValue) {
      setValue(function(prev) {
        var selectedValue = eventSelector(nextValue);
        return shallowEqual(prev, selectedValue) ? prev : selectedValue;
      });
    }
    listeners.add(trigger);
    return function() {
      listeners.delete(trigger);
    };
  }, [context]);
  return value;
}
export {
  createContext,
  useContextSelector
};
