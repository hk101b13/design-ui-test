import _extends from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/extends.js";
import _objectWithoutProperties from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js";
import _typeof from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/typeof.js";
import _toConsumableArray from "../../../../../@babel_runtime@7.23.6/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js";
import * as React from "react";
import toArray from "../../../../../rc-util@5.38.1_react-dom@18.2.0_react@18.2.0/node_modules/rc-util/es/Children/toArray.js";
import "../index.js";
import MenuItemGroup from "../MenuItemGroup.js";
import SubMenu from "../SubMenu/index.js";
import Divider from "../Divider.js";
import MenuItem from "../MenuItem.js";
var _excluded = ["label", "children", "key", "type"];
function parseChildren(children, keyPath) {
  return toArray(children).map(function(child, index) {
    if (/* @__PURE__ */ React.isValidElement(child)) {
      var _eventKey, _child$props;
      var key = child.key;
      var eventKey = (_eventKey = (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.eventKey) !== null && _eventKey !== void 0 ? _eventKey : key;
      var emptyKey = eventKey === null || eventKey === void 0;
      if (emptyKey) {
        eventKey = "tmp_key-".concat([].concat(_toConsumableArray(keyPath), [index]).join("-"));
      }
      var cloneProps = {
        key: eventKey,
        eventKey
      };
      if (process.env.NODE_ENV !== "production" && emptyKey) {
        cloneProps.warnKey = true;
      }
      return /* @__PURE__ */ React.cloneElement(child, cloneProps);
    }
    return child;
  });
}
function convertItemsToNodes(list) {
  return (list || []).map(function(opt, index) {
    if (opt && _typeof(opt) === "object") {
      var _ref = opt, label = _ref.label, children = _ref.children, key = _ref.key, type = _ref.type, restProps = _objectWithoutProperties(_ref, _excluded);
      var mergedKey = key !== null && key !== void 0 ? key : "tmp-".concat(index);
      if (children || type === "group") {
        if (type === "group") {
          return /* @__PURE__ */ React.createElement(MenuItemGroup, _extends({
            key: mergedKey
          }, restProps, {
            title: label
          }), convertItemsToNodes(children));
        }
        return /* @__PURE__ */ React.createElement(SubMenu, _extends({
          key: mergedKey
        }, restProps, {
          title: label
        }), convertItemsToNodes(children));
      }
      if (type === "divider") {
        return /* @__PURE__ */ React.createElement(Divider, _extends({
          key: mergedKey
        }, restProps));
      }
      return /* @__PURE__ */ React.createElement(MenuItem, _extends({
        key: mergedKey
      }, restProps), label);
    }
    return null;
  }).filter(function(opt) {
    return opt;
  });
}
function parseItems(children, items, keyPath) {
  var childNodes = children;
  if (items) {
    childNodes = convertItemsToNodes(items);
  }
  return parseChildren(childNodes, keyPath);
}
export {
  parseChildren,
  parseItems
};
